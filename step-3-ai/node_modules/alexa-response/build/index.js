'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var alexaSsmlJsx = require('alexa-ssml-jsx');
var alexaConstants = require('alexa-constants');

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};





var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};











var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};





var set = function set(object, property, value, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent !== null) {
      set(parent, property, value, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    desc.value = value;
  } else {
    var setter = desc.set;

    if (setter !== undefined) {
      setter.call(receiver, value);
    }
  }

  return value;
};















var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var _class;
var _temp;

var Response$1 = (_temp = _class = function () {
  function Response() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, Response);

    this.state = state;
  }

  createClass(Response, [{
    key: 'ask',
    value: function ask(text, type) {
      return this.say(text, type).shouldEndSession(false);
    }
  }, {
    key: 'say',
    value: function say(text, type) {
      return new Response(_extends({}, this.state, {
        response: _extends({}, this.state.response, {
          shouldEndSession: true
        }, outputSpeech(text, type))
      }));
    }
  }, {
    key: 'reprompt',
    value: function reprompt(text, type) {
      return new Response(_extends({}, this.state, {
        response: _extends({}, this.state.response, {
          reprompt: _extends({}, outputSpeech(text, type))
        })
      }));
    }
  }, {
    key: 'card',
    value: function card(_ref) {
      var _ref$type = _ref.type,
          type = _ref$type === undefined ? alexaConstants.CardType.Simple : _ref$type,
          rest = objectWithoutProperties(_ref, ['type']);

      return new Response(_extends({}, this.state, {
        response: _extends({}, this.state.response, {
          card: _extends({}, rest, type && { type: type })
        })
      }));
    }
  }, {
    key: 'attributes',
    value: function attributes(data) {
      return new Response(_extends({}, this.state, {
        sessionAttributes: _extends({}, this.state.sessionAttributes, data)
      }));
    }
  }, {
    key: 'shouldEndSession',
    value: function shouldEndSession(_shouldEndSession) {
      return new Response(_extends({}, this.state, {
        response: _extends({}, this.state.response, {
          shouldEndSession: _shouldEndSession
        })
      }));
    }
  }, {
    key: 'directives',
    value: function directives(directive) {
      for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }

      var directives = Array.isArray(directive) ? directive : [directive].concat(rest);

      var _ref2 = this.state.response || {},
          _ref2$directives = _ref2.directives,
          previousDirectives = _ref2$directives === undefined ? [] : _ref2$directives;

      return new Response(_extends({}, this.state, {
        response: _extends({}, this.state.response, {
          directives: [].concat(toConsumableArray(previousDirectives), toConsumableArray(directives))
        })
      }));
    }
  }, {
    key: 'build',
    value: function build(attributes) {
      return _extends({
        version: '1.0'
      }, this.state, {
        response: _extends({
          shouldEndSession: true
        }, this.state.response)
      }, attributes || this.state.sessionAttributes ? { sessionAttributes: _extends({}, attributes, this.state.sessionAttributes) } : null);
    }
  }]);
  return Response;
}(), _class.ask = function () {
  var _ref3;

  return (_ref3 = new Response$1()).ask.apply(_ref3, arguments);
}, _class.say = function () {
  var _ref4;

  return (_ref4 = new Response$1()).say.apply(_ref4, arguments);
}, _class.card = function () {
  var _ref5;

  return (_ref5 = new Response$1()).card.apply(_ref5, arguments);
}, _class.reprompt = function () {
  var _ref6;

  return (_ref6 = new Response$1()).reprompt.apply(_ref6, arguments);
}, _class.shouldEndSession = function () {
  var _ref7;

  return (_ref7 = new Response$1()).shouldEndSession.apply(_ref7, arguments);
}, _class.directives = function () {
  var _ref8;

  return (_ref8 = new Response$1()).directives.apply(_ref8, arguments);
}, _class.build = function (params) {
  return Object.keys(params).reduce(function (response, action) {
    var options = params[action];
    var text = typeof options === 'string' ? options : options;
    var type = typeof options === 'string' ? undefined : options.type;
    switch (action) {
      case 'ask':
        return response.ask(text, type);
      case 'say':
        return response.say(text, type);
      case 'reprompt':
        return response.reprompt(text, type);
      case 'card':
        return response.card(options);
      case 'attributes':
        return response.attributes(options);
      case 'shouldEndSession':
        return response.shouldEndSession(options);
      case 'directives':
        return response.directives(options);
    }
  }, new Response$1());
}, _temp);
var outputSpeech = function outputSpeech(text) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : alexaConstants.SpeechType.PlainText;

  if (type === alexaConstants.SpeechType.SSML || (typeof text === 'undefined' ? 'undefined' : _typeof(text)) === 'object') {
    var speech = (typeof text === 'undefined' ? 'undefined' : _typeof(text)) === 'object' ? alexaSsmlJsx.renderToString(text) : text;
    return { outputSpeech: { type: alexaConstants.SpeechType.SSML, ssml: speech } };
  } else {
    return { outputSpeech: { type: type, text: text } };
  }
};

var Directive = alexaConstants.AudioPlayer.Directive;
var PlayBehavior = alexaConstants.AudioPlayer.PlayBehavior;
var ClearBehavior = alexaConstants.AudioPlayer.ClearBehavior;


var AudioPlayer$1 = {
  play: function play(stream) {
    return {
      type: Directive.Play,
      playBehavior: PlayBehavior.ReplaceAll,
      audioItem: { stream: stream }
    };
  },
  enqueue: function enqueue(stream) {
    var replaceQueue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    return {
      type: Directive.Play,
      playBehavior: replaceQueue ? PlayBehavior.ReplaceEnqueued : PlayBehavior.Enqueue,
      audioItem: { stream: stream }
    };
  },
  stop: function stop() {
    return {
      type: Directive.Stop
    };
  },
  clearQueue: function clearQueue() {
    var stopCurrent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    return {
      type: Directive.ClearQueue,
      clearBehavior: stopCurrent ? ClearBehavior.ClearAll : ClearBehavior.ClearEnqueued
    };
  }
};

// For commonjs compatibility
var ask$1 = Response$1.ask;
var say$1 = Response$1.say;
var card$1 = Response$1.card;
var reprompt$1 = Response$1.reprompt;
var shouldEndSession$1 = Response$1.shouldEndSession;
var directives = Response$1.directives;
var build$1 = Response$1.build;

exports.AudioPlayer = AudioPlayer$1;
exports.Response = Response$1;
exports['default'] = Response$1;
exports.ask = ask$1;
exports.say = say$1;
exports.card = card$1;
exports.reprompt = reprompt$1;
exports.shouldEndSession = shouldEndSession$1;
exports.directives = directives;
exports.build = build$1;
